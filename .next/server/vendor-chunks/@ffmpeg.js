/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ffmpeg";
exports.ids = ["vendor-chunks/@ffmpeg"];
exports.modules = {

/***/ "(ssr)/./node_modules/@ffmpeg/ffmpeg/src/config.js":
/*!***************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/src/config.js ***!
  \***************************************************/
/***/ ((module) => {

eval("module.exports = {\n  defaultArgs: [\n    /* args[0] is always the binary path */\n    './ffmpeg',\n    /* Disable interaction mode */\n    '-nostdin',\n    /* Force to override output file */\n    '-y',\n  ],\n  baseOptions: {\n    /* Flag to turn on/off log messages in console */\n    log: false,\n    /*\n     * Custom logger to get ffmpeg.wasm output messages.\n     * a sample logger looks like this:\n     *\n     * ```\n     * logger = ({ type, message }) => {\n     *   console.log(type, message);\n     * }\n     * ```\n     *\n     * type can be one of following:\n     *\n     * info: internal workflow debug messages\n     * fferr: ffmpeg native stderr output\n     * ffout: ffmpeg native stdout output\n     */\n    logger: () => {},\n    /*\n     * Progress handler to get current progress of ffmpeg command.\n     * a sample progress handler looks like this:\n     *\n     * ```\n     * progress = ({ ratio }) => {\n     *   console.log(ratio);\n     * }\n     * ```\n     *\n     * ratio is a float number between 0 to 1.\n     */\n    progress: () => {},\n    /*\n     * Path to find/download ffmpeg.wasm-core,\n     * this value should be overwriten by `defaultOptions` in\n     * each environment.\n     */\n    corePath: '',\n  },\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZmbXBlZy9mZm1wZWcvc3JjL2NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGVBQWU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixPQUFPO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuLWFydGlmYWN0cy8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL2ZmbXBlZy9zcmMvY29uZmlnLmpzPzZmODAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlZmF1bHRBcmdzOiBbXG4gICAgLyogYXJnc1swXSBpcyBhbHdheXMgdGhlIGJpbmFyeSBwYXRoICovXG4gICAgJy4vZmZtcGVnJyxcbiAgICAvKiBEaXNhYmxlIGludGVyYWN0aW9uIG1vZGUgKi9cbiAgICAnLW5vc3RkaW4nLFxuICAgIC8qIEZvcmNlIHRvIG92ZXJyaWRlIG91dHB1dCBmaWxlICovXG4gICAgJy15JyxcbiAgXSxcbiAgYmFzZU9wdGlvbnM6IHtcbiAgICAvKiBGbGFnIHRvIHR1cm4gb24vb2ZmIGxvZyBtZXNzYWdlcyBpbiBjb25zb2xlICovXG4gICAgbG9nOiBmYWxzZSxcbiAgICAvKlxuICAgICAqIEN1c3RvbSBsb2dnZXIgdG8gZ2V0IGZmbXBlZy53YXNtIG91dHB1dCBtZXNzYWdlcy5cbiAgICAgKiBhIHNhbXBsZSBsb2dnZXIgbG9va3MgbGlrZSB0aGlzOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogbG9nZ2VyID0gKHsgdHlwZSwgbWVzc2FnZSB9KSA9PiB7XG4gICAgICogICBjb25zb2xlLmxvZyh0eXBlLCBtZXNzYWdlKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiB0eXBlIGNhbiBiZSBvbmUgb2YgZm9sbG93aW5nOlxuICAgICAqXG4gICAgICogaW5mbzogaW50ZXJuYWwgd29ya2Zsb3cgZGVidWcgbWVzc2FnZXNcbiAgICAgKiBmZmVycjogZmZtcGVnIG5hdGl2ZSBzdGRlcnIgb3V0cHV0XG4gICAgICogZmZvdXQ6IGZmbXBlZyBuYXRpdmUgc3Rkb3V0IG91dHB1dFxuICAgICAqL1xuICAgIGxvZ2dlcjogKCkgPT4ge30sXG4gICAgLypcbiAgICAgKiBQcm9ncmVzcyBoYW5kbGVyIHRvIGdldCBjdXJyZW50IHByb2dyZXNzIG9mIGZmbXBlZyBjb21tYW5kLlxuICAgICAqIGEgc2FtcGxlIHByb2dyZXNzIGhhbmRsZXIgbG9va3MgbGlrZSB0aGlzOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogcHJvZ3Jlc3MgPSAoeyByYXRpbyB9KSA9PiB7XG4gICAgICogICBjb25zb2xlLmxvZyhyYXRpbyk7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogcmF0aW8gaXMgYSBmbG9hdCBudW1iZXIgYmV0d2VlbiAwIHRvIDEuXG4gICAgICovXG4gICAgcHJvZ3Jlc3M6ICgpID0+IHt9LFxuICAgIC8qXG4gICAgICogUGF0aCB0byBmaW5kL2Rvd25sb2FkIGZmbXBlZy53YXNtLWNvcmUsXG4gICAgICogdGhpcyB2YWx1ZSBzaG91bGQgYmUgb3ZlcndyaXRlbiBieSBgZGVmYXVsdE9wdGlvbnNgIGluXG4gICAgICogZWFjaCBlbnZpcm9ubWVudC5cbiAgICAgKi9cbiAgICBjb3JlUGF0aDogJycsXG4gIH0sXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ffmpeg/ffmpeg/src/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ffmpeg/ffmpeg/src/createFFmpeg.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/src/createFFmpeg.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { defaultArgs, baseOptions } = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@ffmpeg/ffmpeg/src/config.js\");\nconst parseArgs = __webpack_require__(/*! ./utils/parseArgs */ \"(ssr)/./node_modules/@ffmpeg/ffmpeg/src/utils/parseArgs.js\");\nconst { defaultOptions, getCreateFFmpegCore } = __webpack_require__(/*! ./node */ \"(ssr)/./node_modules/@ffmpeg/ffmpeg/src/node/index.js\");\nconst { version } = __webpack_require__(/*! ../package.json */ \"(ssr)/./node_modules/@ffmpeg/ffmpeg/package.json\");\n\nconst NO_LOAD = Error('ffmpeg.wasm is not ready, make sure you have completed load().');\n\nmodule.exports = (_options = {}) => {\n  const {\n    log: optLog,\n    logger,\n    progress: optProgress,\n    ...options\n  } = {\n    ...baseOptions,\n    ...defaultOptions,\n    ..._options,\n  };\n  let Core = null;\n  let ffmpeg = null;\n  let runResolve = null;\n  let runReject = null;\n  let running = false;\n  let customLogger = () => {};\n  let logging = optLog;\n  let progress = optProgress;\n  let duration = 0;\n  let frames = 0;\n  let readFrames = false;\n  let ratio = 0;\n\n  const detectCompletion = (message) => {\n    if (message === 'FFMPEG_END' && runResolve !== null) {\n      runResolve();\n      runResolve = null;\n      runReject = null;\n      running = false;\n    }\n  };\n  const log = (type, message) => {\n    customLogger({ type, message });\n    if (logging) {\n      console.log(`[${type}] ${message}`);\n    }\n  };\n  const ts2sec = (ts) => {\n    const [h, m, s] = ts.split(':');\n    return (parseFloat(h) * 60 * 60) + (parseFloat(m) * 60) + parseFloat(s);\n  };\n  const parseProgress = (message, prog) => {\n    if (typeof message === 'string') {\n      if (message.startsWith('  Duration')) {\n        const ts = message.split(', ')[0].split(': ')[1];\n        const d = ts2sec(ts);\n        prog({ duration: d, ratio });\n        if (duration === 0 || duration > d) {\n          duration = d;\n          readFrames = true;\n        }\n      } else if (readFrames && message.startsWith('    Stream')) {\n        const match = message.match(/([\\d.]+) fps/);\n        if (match) {\n          const fps = parseFloat(match[1]);\n          frames = duration * fps;\n        } else {\n          frames = 0;\n        }\n        readFrames = false;\n      } else if (message.startsWith('frame') || message.startsWith('size')) {\n        const ts = message.split('time=')[1].split(' ')[0];\n        const t = ts2sec(ts);\n        const match = message.match(/frame=\\s*(\\d+)/);\n        if (frames && match) {\n          const f = parseFloat(match[1]);\n          ratio = Math.min(f / frames, 1);\n        } else {\n          ratio = t / duration;\n        }\n        prog({ ratio, time: t });\n      } else if (message.startsWith('video:')) {\n        prog({ ratio: 1 });\n        duration = 0;\n      }\n    }\n  };\n  const parseMessage = ({ type, message }) => {\n    log(type, message);\n    parseProgress(message, progress);\n    detectCompletion(message);\n  };\n\n  /*\n   * Load ffmpeg.wasm-core script.\n   * In browser environment, the ffmpeg.wasm-core script is fetch from\n   * CDN and can be assign to a local path by assigning `corePath`.\n   * In node environment, we use dynamic require and the default `corePath`\n   * is `$ffmpeg/core`.\n   *\n   * Typically the load() func might take few seconds to minutes to complete,\n   * better to do it as early as possible.\n   *\n   */\n  const load = async () => {\n    log('info', 'load ffmpeg-core');\n    if (Core === null) {\n      log('info', 'loading ffmpeg-core');\n      /*\n       * In node environment, all paths are undefined as there\n       * is no need to set them.\n       */\n      const {\n        createFFmpegCore,\n        corePath,\n        workerPath,\n        wasmPath,\n      } = await getCreateFFmpegCore(options);\n      Core = await createFFmpegCore({\n        /*\n         * Assign mainScriptUrlOrBlob fixes chrome extension web worker issue\n         * as there is no document.currentScript in the context of content_scripts\n         */\n        mainScriptUrlOrBlob: corePath,\n        printErr: (message) => parseMessage({ type: 'fferr', message }),\n        print: (message) => parseMessage({ type: 'ffout', message }),\n        /*\n         * locateFile overrides paths of files that is loaded by main script (ffmpeg-core.js).\n         * It is critical for browser environment and we override both wasm and worker paths\n         * as we are using blob URL instead of original URL to avoid cross origin issues.\n         */\n        locateFile: (path, prefix) => {\n          if (typeof window !== 'undefined' || typeof WorkerGlobalScope !== 'undefined') {\n            if (typeof wasmPath !== 'undefined'\n              && path.endsWith('ffmpeg-core.wasm')) {\n              return wasmPath;\n            }\n            if (typeof workerPath !== 'undefined'\n              && path.endsWith('ffmpeg-core.worker.js')) {\n              return workerPath;\n            }\n          }\n          return prefix + path;\n        },\n      });\n      ffmpeg = Core.cwrap(options.mainName || 'proxy_main', 'number', ['number', 'number']);\n      log('info', 'ffmpeg-core loaded');\n    } else {\n      throw Error('ffmpeg.wasm was loaded, you should not load it again, use ffmpeg.isLoaded() to check next time.');\n    }\n  };\n\n  /*\n   * Determine whether the Core is loaded.\n   */\n  const isLoaded = () => Core !== null;\n\n  /*\n   * Run ffmpeg command.\n   * This is the major function in ffmpeg.wasm, you can just imagine it\n   * as ffmpeg native cli and what you need to pass is the same.\n   *\n   * For example, you can convert native command below:\n   *\n   * ```\n   * $ ffmpeg -i video.avi -c:v libx264 video.mp4\n   * ```\n   *\n   * To\n   *\n   * ```\n   * await ffmpeg.run('-i', 'video.avi', '-c:v', 'libx264', 'video.mp4');\n   * ```\n   *\n   */\n  const run = (..._args) => {\n    log('info', `run ffmpeg command: ${_args.join(' ')}`);\n    if (Core === null) {\n      throw NO_LOAD;\n    } else if (running) {\n      throw Error('ffmpeg.wasm can only run one command at a time');\n    } else {\n      running = true;\n      return new Promise((resolve, reject) => {\n        const args = [...defaultArgs, ..._args].filter((s) => s.length !== 0);\n        runResolve = resolve;\n        runReject = reject;\n        ffmpeg(...parseArgs(Core, args));\n      });\n    }\n  };\n\n  /*\n   * Run FS operations.\n   * For input/output file of ffmpeg.wasm, it is required to save them to MEMFS\n   * first so that ffmpeg.wasm is able to consume them. Here we rely on the FS\n   * methods provided by Emscripten.\n   *\n   * Common methods to use are:\n   * ffmpeg.FS('writeFile', 'video.avi', new Uint8Array(...)): writeFile writes\n   * data to MEMFS. You need to use Uint8Array for binary data.\n   * ffmpeg.FS('readFile', 'video.mp4'): readFile from MEMFS.\n   * ffmpeg.FS('unlink', 'video.map'): delete file from MEMFS.\n   *\n   * For more info, check https://emscripten.org/docs/api_reference/Filesystem-API.html\n   *\n   */\n  const FS = (method, ...args) => {\n    log('info', `run FS.${method} ${args.map((arg) => (typeof arg === 'string' ? arg : `<${arg.length} bytes binary file>`)).join(' ')}`);\n    if (Core === null) {\n      throw NO_LOAD;\n    } else {\n      let ret = null;\n      try {\n        ret = Core.FS[method](...args);\n      } catch (e) {\n        if (method === 'readdir') {\n          throw Error(`ffmpeg.FS('readdir', '${args[0]}') error. Check if the path exists, ex: ffmpeg.FS('readdir', '/')`);\n        } else if (method === 'readFile') {\n          throw Error(`ffmpeg.FS('readFile', '${args[0]}') error. Check if the path exists`);\n        } else {\n          throw Error('Oops, something went wrong in FS operation.');\n        }\n      }\n      return ret;\n    }\n  };\n\n  /**\n   * forcibly terminate the ffmpeg program.\n   */\n  const exit = () => {\n    if (Core === null) {\n      throw NO_LOAD;\n    } else {\n      // if there's any pending runs, reject them\n      if (runReject) {\n        runReject('ffmpeg has exited');\n      }\n      running = false;\n      try {\n        Core.exit(1);\n      } catch (err) {\n        log(err.message);\n        if (runReject) {\n          runReject(err);\n        }\n      } finally {\n        Core = null;\n        ffmpeg = null;\n        runResolve = null;\n        runReject = null;\n      }\n    }\n  };\n\n  const setProgress = (_progress) => {\n    progress = _progress;\n  };\n\n  const setLogger = (_logger) => {\n    customLogger = _logger;\n  };\n\n  const setLogging = (_logging) => {\n    logging = _logging;\n  };\n\n  log('info', `use ffmpeg.wasm v${version}`);\n\n  return {\n    setProgress,\n    setLogger,\n    setLogging,\n    load,\n    isLoaded,\n    run,\n    exit,\n    FS,\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ffmpeg/ffmpeg/src/createFFmpeg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ffmpeg/ffmpeg/src/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/src/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("__webpack_require__(/*! regenerator-runtime/runtime */ \"(ssr)/./node_modules/regenerator-runtime/runtime.js\");\nconst createFFmpeg = __webpack_require__(/*! ./createFFmpeg */ \"(ssr)/./node_modules/@ffmpeg/ffmpeg/src/createFFmpeg.js\");\nconst { fetchFile } = __webpack_require__(/*! ./node */ \"(ssr)/./node_modules/@ffmpeg/ffmpeg/src/node/index.js\");\n\nmodule.exports = {\n  /*\n   * Create ffmpeg instance.\n   * Each ffmpeg instance owns an isolated MEMFS and works\n   * independently.\n   *\n   * For example:\n   *\n   * ```\n   * const ffmpeg = createFFmpeg({\n   *  log: true,\n   *  logger: () => {},\n   *  progress: () => {},\n   *  corePath: '',\n   * })\n   * ```\n   *\n   * For the usage of these four arguments, check config.js\n   *\n   */\n  createFFmpeg,\n  /*\n   * Helper function for fetching files from various resource.\n   * Sometimes the video/audio file you want to process may located\n   * in a remote URL and somewhere in your local file system.\n   *\n   * This helper function helps you to fetch to file and return an\n   * Uint8Array variable for ffmpeg.wasm to consume.\n   *\n   */\n  fetchFile,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZmbXBlZy9mZm1wZWcvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLG1CQUFPLENBQUMsd0ZBQTZCO0FBQ3JDLHFCQUFxQixtQkFBTyxDQUFDLCtFQUFnQjtBQUM3QyxRQUFRLFlBQVksRUFBRSxtQkFBTyxDQUFDLHFFQUFROztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLHdCQUF3QjtBQUN4QjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3Blbi1hcnRpZmFjdHMvLi9ub2RlX21vZHVsZXMvQGZmbXBlZy9mZm1wZWcvc3JjL2luZGV4LmpzPzFjYzUiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgncmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lJyk7XG5jb25zdCBjcmVhdGVGRm1wZWcgPSByZXF1aXJlKCcuL2NyZWF0ZUZGbXBlZycpO1xuY29uc3QgeyBmZXRjaEZpbGUgfSA9IHJlcXVpcmUoJy4vbm9kZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLypcbiAgICogQ3JlYXRlIGZmbXBlZyBpbnN0YW5jZS5cbiAgICogRWFjaCBmZm1wZWcgaW5zdGFuY2Ugb3ducyBhbiBpc29sYXRlZCBNRU1GUyBhbmQgd29ya3NcbiAgICogaW5kZXBlbmRlbnRseS5cbiAgICpcbiAgICogRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqIGBgYFxuICAgKiBjb25zdCBmZm1wZWcgPSBjcmVhdGVGRm1wZWcoe1xuICAgKiAgbG9nOiB0cnVlLFxuICAgKiAgbG9nZ2VyOiAoKSA9PiB7fSxcbiAgICogIHByb2dyZXNzOiAoKSA9PiB7fSxcbiAgICogIGNvcmVQYXRoOiAnJyxcbiAgICogfSlcbiAgICogYGBgXG4gICAqXG4gICAqIEZvciB0aGUgdXNhZ2Ugb2YgdGhlc2UgZm91ciBhcmd1bWVudHMsIGNoZWNrIGNvbmZpZy5qc1xuICAgKlxuICAgKi9cbiAgY3JlYXRlRkZtcGVnLFxuICAvKlxuICAgKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGZldGNoaW5nIGZpbGVzIGZyb20gdmFyaW91cyByZXNvdXJjZS5cbiAgICogU29tZXRpbWVzIHRoZSB2aWRlby9hdWRpbyBmaWxlIHlvdSB3YW50IHRvIHByb2Nlc3MgbWF5IGxvY2F0ZWRcbiAgICogaW4gYSByZW1vdGUgVVJMIGFuZCBzb21ld2hlcmUgaW4geW91ciBsb2NhbCBmaWxlIHN5c3RlbS5cbiAgICpcbiAgICogVGhpcyBoZWxwZXIgZnVuY3Rpb24gaGVscHMgeW91IHRvIGZldGNoIHRvIGZpbGUgYW5kIHJldHVybiBhblxuICAgKiBVaW50OEFycmF5IHZhcmlhYmxlIGZvciBmZm1wZWcud2FzbSB0byBjb25zdW1lLlxuICAgKlxuICAgKi9cbiAgZmV0Y2hGaWxlLFxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ffmpeg/ffmpeg/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ffmpeg/ffmpeg/src/node/defaultOptions.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/src/node/defaultOptions.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("/*\n * Default options for node environment\n */\nmodule.exports = {\n  corePath: '@ffmpeg/core',\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZmbXBlZy9mZm1wZWcvc3JjL25vZGUvZGVmYXVsdE9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3Blbi1hcnRpZmFjdHMvLi9ub2RlX21vZHVsZXMvQGZmbXBlZy9mZm1wZWcvc3JjL25vZGUvZGVmYXVsdE9wdGlvbnMuanM/M2NlNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogRGVmYXVsdCBvcHRpb25zIGZvciBub2RlIGVudmlyb25tZW50XG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjb3JlUGF0aDogJ0BmZm1wZWcvY29yZScsXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ffmpeg/ffmpeg/src/node/defaultOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ffmpeg/ffmpeg/src/node/fetchFile.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/src/node/fetchFile.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const util = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst fetch = __webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\");\nconst isURL = __webpack_require__(/*! is-url */ \"(ssr)/./node_modules/is-url/index.js\");\n\nmodule.exports = async (_data) => {\n  let data = _data;\n  if (typeof _data === 'undefined') {\n    return new Uint8Array();\n  }\n\n  if (typeof _data === 'string') {\n    /* From remote URL/server */\n    if (isURL(_data)\n      || _data.startsWith('moz-extension://')\n      || _data.startsWith('chrome-extension://')\n      || _data.startsWith('file://')) {\n      const res = await fetch(_data);\n      data = await res.arrayBuffer();\n    /* From base64 format */\n    } else if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(_data)) {\n      data = Buffer.from(_data.split(',')[1], 'base64');\n    /* From local file path */\n    } else {\n      data = await util.promisify(fs.readFile)(_data);\n    }\n    /* From Buffer */\n  } else if (Buffer.isBuffer(_data)) {\n    data = _data;\n  }\n\n  return new Uint8Array(data);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZmbXBlZy9mZm1wZWcvc3JjL25vZGUvZmV0Y2hGaWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUJBQU8sQ0FBQyxrQkFBTTtBQUMzQixXQUFXLG1CQUFPLENBQUMsY0FBSTtBQUN2QixjQUFjLG1CQUFPLENBQUMsaUVBQVk7QUFDbEMsY0FBYyxtQkFBTyxDQUFDLG9EQUFROztBQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sa0NBQWtDO0FBQ3hDO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW4tYXJ0aWZhY3RzLy4vbm9kZV9tb2R1bGVzL0BmZm1wZWcvZmZtcGVnL3NyYy9ub2RlL2ZldGNoRmlsZS5qcz8yNmE0Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBmZXRjaCA9IHJlcXVpcmUoJ25vZGUtZmV0Y2gnKTtcbmNvbnN0IGlzVVJMID0gcmVxdWlyZSgnaXMtdXJsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKF9kYXRhKSA9PiB7XG4gIGxldCBkYXRhID0gX2RhdGE7XG4gIGlmICh0eXBlb2YgX2RhdGEgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KCk7XG4gIH1cblxuICBpZiAodHlwZW9mIF9kYXRhID09PSAnc3RyaW5nJykge1xuICAgIC8qIEZyb20gcmVtb3RlIFVSTC9zZXJ2ZXIgKi9cbiAgICBpZiAoaXNVUkwoX2RhdGEpXG4gICAgICB8fCBfZGF0YS5zdGFydHNXaXRoKCdtb3otZXh0ZW5zaW9uOi8vJylcbiAgICAgIHx8IF9kYXRhLnN0YXJ0c1dpdGgoJ2Nocm9tZS1leHRlbnNpb246Ly8nKVxuICAgICAgfHwgX2RhdGEuc3RhcnRzV2l0aCgnZmlsZTovLycpKSB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChfZGF0YSk7XG4gICAgICBkYXRhID0gYXdhaXQgcmVzLmFycmF5QnVmZmVyKCk7XG4gICAgLyogRnJvbSBiYXNlNjQgZm9ybWF0ICovXG4gICAgfSBlbHNlIGlmICgvZGF0YTpfZGF0YVxcLyhbYS16QS1aXSopO2Jhc2U2NCwoW15cIl0qKS8udGVzdChfZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBCdWZmZXIuZnJvbShfZGF0YS5zcGxpdCgnLCcpWzFdLCAnYmFzZTY0Jyk7XG4gICAgLyogRnJvbSBsb2NhbCBmaWxlIHBhdGggKi9cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IGF3YWl0IHV0aWwucHJvbWlzaWZ5KGZzLnJlYWRGaWxlKShfZGF0YSk7XG4gICAgfVxuICAgIC8qIEZyb20gQnVmZmVyICovXG4gIH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKF9kYXRhKSkge1xuICAgIGRhdGEgPSBfZGF0YTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVWludDhBcnJheShkYXRhKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ffmpeg/ffmpeg/src/node/fetchFile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ffmpeg/ffmpeg/src/node/getCreateFFmpegCore.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/src/node/getCreateFFmpegCore.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { log } = __webpack_require__(/*! ../utils/log */ \"(ssr)/./node_modules/@ffmpeg/ffmpeg/src/utils/log.js\");\n\nmodule.exports = ({ corePath }) => new Promise((resolve) => {\n  log('info', `fetch ffmpeg.wasm-core script from ${corePath}`);\n  // eslint-disable-next-line import/no-dynamic-require\n  resolve({ createFFmpegCore: __webpack_require__(\"(ssr)/./node_modules/@ffmpeg/ffmpeg/src/node sync recursive\")(corePath) });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZmbXBlZy9mZm1wZWcvc3JjL25vZGUvZ2V0Q3JlYXRlRkZtcGVnQ29yZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxRQUFRLE1BQU0sRUFBRSxtQkFBTyxDQUFDLDBFQUFjOztBQUV0QyxvQkFBb0IsVUFBVTtBQUM5QixvREFBb0QsU0FBUztBQUM3RDtBQUNBLFlBQVksa0JBQWtCLG1GQUFRLFFBQVEsQ0FBQyxFQUFFO0FBQ2pELENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuLWFydGlmYWN0cy8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL2ZmbXBlZy9zcmMvbm9kZS9nZXRDcmVhdGVGRm1wZWdDb3JlLmpzPzA2YzIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBsb2cgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL2xvZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICh7IGNvcmVQYXRoIH0pID0+IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gIGxvZygnaW5mbycsIGBmZXRjaCBmZm1wZWcud2FzbS1jb3JlIHNjcmlwdCBmcm9tICR7Y29yZVBhdGh9YCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZHluYW1pYy1yZXF1aXJlXG4gIHJlc29sdmUoeyBjcmVhdGVGRm1wZWdDb3JlOiByZXF1aXJlKGNvcmVQYXRoKSB9KTtcbn0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ffmpeg/ffmpeg/src/node/getCreateFFmpegCore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ffmpeg/ffmpeg/src/node/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/src/node/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const defaultOptions = __webpack_require__(/*! ./defaultOptions */ \"(ssr)/./node_modules/@ffmpeg/ffmpeg/src/node/defaultOptions.js\");\nconst getCreateFFmpegCore = __webpack_require__(/*! ./getCreateFFmpegCore */ \"(ssr)/./node_modules/@ffmpeg/ffmpeg/src/node/getCreateFFmpegCore.js\");\nconst fetchFile = __webpack_require__(/*! ./fetchFile */ \"(ssr)/./node_modules/@ffmpeg/ffmpeg/src/node/fetchFile.js\");\n\nmodule.exports = {\n  defaultOptions,\n  getCreateFFmpegCore,\n  fetchFile,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZmbXBlZy9mZm1wZWcvc3JjL25vZGUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsdUJBQXVCLG1CQUFPLENBQUMsd0ZBQWtCO0FBQ2pELDRCQUE0QixtQkFBTyxDQUFDLGtHQUF1QjtBQUMzRCxrQkFBa0IsbUJBQU8sQ0FBQyw4RUFBYTs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW4tYXJ0aWZhY3RzLy4vbm9kZV9tb2R1bGVzL0BmZm1wZWcvZmZtcGVnL3NyYy9ub2RlL2luZGV4LmpzPzJiMjIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGVmYXVsdE9wdGlvbnMgPSByZXF1aXJlKCcuL2RlZmF1bHRPcHRpb25zJyk7XG5jb25zdCBnZXRDcmVhdGVGRm1wZWdDb3JlID0gcmVxdWlyZSgnLi9nZXRDcmVhdGVGRm1wZWdDb3JlJyk7XG5jb25zdCBmZXRjaEZpbGUgPSByZXF1aXJlKCcuL2ZldGNoRmlsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVmYXVsdE9wdGlvbnMsXG4gIGdldENyZWF0ZUZGbXBlZ0NvcmUsXG4gIGZldGNoRmlsZSxcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ffmpeg/ffmpeg/src/node/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ffmpeg/ffmpeg/src/utils/log.js":
/*!******************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/src/utils/log.js ***!
  \******************************************************/
/***/ ((module) => {

eval("let logging = false;\nlet customLogger = () => {};\n\nconst setLogging = (_logging) => {\n  logging = _logging;\n};\n\nconst setCustomLogger = (logger) => {\n  customLogger = logger;\n};\n\nconst log = (type, message) => {\n  customLogger({ type, message });\n  if (logging) {\n    console.log(`[${type}] ${message}`);\n  }\n};\n\nmodule.exports = {\n  logging,\n  setLogging,\n  setCustomLogger,\n  log,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZmbXBlZy9mZm1wZWcvc3JjL3V0aWxzL2xvZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsZUFBZTtBQUNoQztBQUNBLG9CQUFvQixLQUFLLElBQUksUUFBUTtBQUNyQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW4tYXJ0aWZhY3RzLy4vbm9kZV9tb2R1bGVzL0BmZm1wZWcvZmZtcGVnL3NyYy91dGlscy9sb2cuanM/M2YxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgbG9nZ2luZyA9IGZhbHNlO1xubGV0IGN1c3RvbUxvZ2dlciA9ICgpID0+IHt9O1xuXG5jb25zdCBzZXRMb2dnaW5nID0gKF9sb2dnaW5nKSA9PiB7XG4gIGxvZ2dpbmcgPSBfbG9nZ2luZztcbn07XG5cbmNvbnN0IHNldEN1c3RvbUxvZ2dlciA9IChsb2dnZXIpID0+IHtcbiAgY3VzdG9tTG9nZ2VyID0gbG9nZ2VyO1xufTtcblxuY29uc3QgbG9nID0gKHR5cGUsIG1lc3NhZ2UpID0+IHtcbiAgY3VzdG9tTG9nZ2VyKHsgdHlwZSwgbWVzc2FnZSB9KTtcbiAgaWYgKGxvZ2dpbmcpIHtcbiAgICBjb25zb2xlLmxvZyhgWyR7dHlwZX1dICR7bWVzc2FnZX1gKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxvZ2dpbmcsXG4gIHNldExvZ2dpbmcsXG4gIHNldEN1c3RvbUxvZ2dlcixcbiAgbG9nLFxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ffmpeg/ffmpeg/src/utils/log.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ffmpeg/ffmpeg/src/utils/parseArgs.js":
/*!************************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/src/utils/parseArgs.js ***!
  \************************************************************/
/***/ ((module) => {

eval("module.exports = (Core, args) => {\n  const argsPtr = Core._malloc(args.length * Uint32Array.BYTES_PER_ELEMENT);\n  args.forEach((s, idx) => {\n    const sz = Core.lengthBytesUTF8(s) + 1;\n    const buf = Core._malloc(sz);\n    Core.stringToUTF8(s, buf, sz);\n    Core.setValue(argsPtr + (Uint32Array.BYTES_PER_ELEMENT * idx), buf, 'i32');\n  });\n  return [args.length, argsPtr];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZmbXBlZy9mZm1wZWcvc3JjL3V0aWxzL3BhcnNlQXJncy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3Blbi1hcnRpZmFjdHMvLi9ub2RlX21vZHVsZXMvQGZmbXBlZy9mZm1wZWcvc3JjL3V0aWxzL3BhcnNlQXJncy5qcz80ZTAyIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gKENvcmUsIGFyZ3MpID0+IHtcbiAgY29uc3QgYXJnc1B0ciA9IENvcmUuX21hbGxvYyhhcmdzLmxlbmd0aCAqIFVpbnQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UKTtcbiAgYXJncy5mb3JFYWNoKChzLCBpZHgpID0+IHtcbiAgICBjb25zdCBzeiA9IENvcmUubGVuZ3RoQnl0ZXNVVEY4KHMpICsgMTtcbiAgICBjb25zdCBidWYgPSBDb3JlLl9tYWxsb2Moc3opO1xuICAgIENvcmUuc3RyaW5nVG9VVEY4KHMsIGJ1Ziwgc3opO1xuICAgIENvcmUuc2V0VmFsdWUoYXJnc1B0ciArIChVaW50MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCAqIGlkeCksIGJ1ZiwgJ2kzMicpO1xuICB9KTtcbiAgcmV0dXJuIFthcmdzLmxlbmd0aCwgYXJnc1B0cl07XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ffmpeg/ffmpeg/src/utils/parseArgs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ffmpeg/ffmpeg/package.json":
/*!**************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/package.json ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"@ffmpeg/ffmpeg","version":"0.11.6","description":"FFmpeg WebAssembly version","main":"src/index.js","types":"src/index.d.ts","directories":{"example":"examples"},"scripts":{"start":"node scripts/server.js","start:worker":"node scripts/worker-server.js","build":"rimraf dist && webpack --config scripts/webpack.config.prod.js","build:worker":"rimraf dist && webpack --config scripts/webpack.config.worker.prod.js","prepublishOnly":"npm run build","lint":"eslint src","wait":"rimraf dist && wait-on http://localhost:3000/dist/ffmpeg.dev.js","test":"npm-run-all -p -r start test:all","test:all":"npm-run-all wait test:browser:ffmpeg test:node:all","test:node":"node node_modules/mocha/bin/_mocha --exit --bail --require ./scripts/test-helper.js","test:node:all":"npm run test:node -- ./tests/*.test.js","test:browser":"mocha-headless-chrome -a allow-file-access-from-files -a incognito -a no-sandbox -a disable-setuid-sandbox -a disable-logging -t 300000","test:browser:ffmpeg":"npm run test:browser -- -f ./tests/ffmpeg.test.html"},"browser":{"./src/node/index.js":"./src/browser/index.js"},"repository":{"type":"git","url":"git+https://github.com/ffmpegwasm/ffmpeg.wasm.git"},"keywords":["ffmpeg","WebAssembly","video"],"author":"Jerome Wu <jeromewus@gmail.com>","license":"MIT","bugs":{"url":"https://github.com/ffmpegwasm/ffmpeg.wasm/issues"},"engines":{"node":">=12.16.1"},"homepage":"https://github.com/ffmpegwasm/ffmpeg.wasm#readme","dependencies":{"is-url":"^1.2.4","node-fetch":"^2.6.1","regenerator-runtime":"^0.13.7","resolve-url":"^0.2.1"},"devDependencies":{"@babel/core":"^7.12.3","@babel/preset-env":"^7.12.1","@ffmpeg/core":"^0.11.0","@types/emscripten":"^1.39.4","babel-eslint":"^10.1.0","babel-loader":"^8.1.0","chai":"^4.2.0","cors":"^2.8.5","eslint":"^7.12.1","eslint-config-airbnb-base":"^14.1.0","eslint-plugin-import":"^2.22.1","express":"^4.17.1","mocha":"^8.2.1","mocha-headless-chrome":"^2.0.3","npm-run-all":"^4.1.5","wait-on":"^5.3.0","webpack":"^5.3.2","webpack-cli":"^4.1.0","webpack-dev-middleware":"^4.0.0"}}');

/***/ })

};
;